{{define "content"}}
    <div class="container mt-4">
        <h2>系统日志实时查看</h2>

        <div class="mb-3">
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="onlyNewLogs">
                <label class="form-check-label" for="onlyNewLogs">仅显示新日志</label>
            </div>
        </div>

        <div class="d-flex justify-content-between mb-3">
            <button id="connectBtn" class="btn btn-primary">连接</button>            <div>
                <button id="clearBtn" class="btn btn-secondary me-2">清除显示</button>
                <button id="deleteLogsBtn" class="btn btn-warning">清理日志内容</button>
            </div>
        </div>

        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <span>日志输出</span>
                <span id="connectionStatus" class="badge bg-secondary">未连接</span>
            </div>
            <div class="card-body p-0">
                <pre id="logOutput" class="m-0 p-3" style="height: 500px; overflow-y: auto; background-color: #f8f9fa; font-size: 0.85rem;"></pre>
            </div>
        </div>
    </div>    <script>
        let eventSource = null;
        const logOutput = document.getElementById('logOutput');
        const connectBtn = document.getElementById('connectBtn');
        const clearBtn = document.getElementById('clearBtn');
        const deleteLogsBtn = document.getElementById('deleteLogsBtn');
        const onlyNewLogs = document.getElementById('onlyNewLogs');
        const connectionStatus = document.getElementById('connectionStatus');

        // 自动滚动到底部
        function scrollToBottom() {
            logOutput.scrollTop = logOutput.scrollHeight;
        }

        // 添加日志行
        function addLogLine(text) {
            const line = document.createElement('div');
            line.textContent = text;
            logOutput.appendChild(line);
            scrollToBottom();
        }

        // 清除显示的日志
        clearBtn.addEventListener('click', () => {
            logOutput.innerHTML = '';
        });        // 清理日志文件内容
        if (deleteLogsBtn) {
            deleteLogsBtn.addEventListener('click', async () => {
                if (!confirm('确定要清理日志文件内容吗？此操作会清空日志文件，但不会删除文件本身！')) {
                    return;
                }

                try {
                    deleteLogsBtn.disabled = true;
                    deleteLogsBtn.textContent = '清理中...';

                    const response = await fetch('/admin/logs/clear', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    });

                    if (response.ok) {
                        const result = await response.json();
                        alert(result.message || '日志文件内容已成功清理');
                        logOutput.innerHTML = '';
                        addLogLine(`[${result.timestamp}] 日志文件内容已清理`);
                    } else {
                        const errorText = await response.text();
                        alert('清理日志文件内容失败: ' + errorText);
                    }
                } catch (error) {
                    alert('清理日志文件内容时发生错误: ' + error.message);
                } finally {
                    deleteLogsBtn.disabled = false;
                    deleteLogsBtn.textContent = '清理日志内容';
                }
            });
        } else {
            console.error('找不到deleteLogsBtn元素');
        }

        // 连接或断开SSE
        connectBtn.addEventListener('click', () => {
            if (eventSource) {
                // 断开连接
                eventSource.close();
                eventSource = null;
                connectBtn.textContent = '连接';
                connectionStatus.textContent = '未连接';
                connectionStatus.className = 'badge bg-secondary';
                return;
            }

            // 建立连接
            const onlyNew = onlyNewLogs.checked;
            const url = `/admin/logs${onlyNew ? '?only_new=true' : ''}`;

            eventSource = new EventSource(url);

            eventSource.onopen = function() {
                connectionStatus.textContent = '已连接';
                connectionStatus.className = 'badge bg-success';
                connectBtn.textContent = '断开';
            };

            eventSource.onmessage = function(event) {
                addLogLine(event.data);
            };

            eventSource.onerror = function(err) {
                connectionStatus.textContent = '连接错误';
                connectionStatus.className = 'badge bg-danger';
                eventSource.close();
                eventSource = null;
                connectBtn.textContent = '连接';
                addLogLine('[系统] SSE连接错误，请重新连接');
            };
        });        // 页面加载时自动连接
        document.addEventListener('DOMContentLoaded', () => {
            connectBtn.click();
        });
    </script>
{{end}}