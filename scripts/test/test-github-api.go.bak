package main

import (
	"fmt"
	"log"
	"ssh-tunnel/updater"
	"time"
)

func main() {
	fmt.Println("测试GitHub API访问...")
	
	// 创建更新器配置
	config := &updater.UpdaterConfig{
		Enabled:        true,
		Owner:          "idefav",
		Repo:           "ssh-tunnel",
		CurrentVersion: "v1.0.0",
		CheckInterval:  time.Hour,
		AutoDownload:   false,
		AutoInstall:    false,
	}
	
	// 创建更新器实例
	updaterInstance := updater.NewUpdater(config)
	
	fmt.Println("正在获取GitHub Release信息...")
	
	// 获取所有发布版本
	releases, err := updaterInstance.GetReleases()
	if err != nil {
		log.Printf("获取发布版本失败: %v", err)
		return
	}
	
	fmt.Printf("找到 %d 个发布版本:\n", len(releases))
	
	for i, release := range releases {
		if i >= 5 { // 只显示前5个版本
			break
		}
		
		fmt.Printf("\n版本: %s\n", release.TagName)
		fmt.Printf("名称: %s\n", release.Name)
		fmt.Printf("发布时间: %s\n", release.PublishedAt)
		fmt.Printf("预发布: %t\n", release.Prerelease)
		fmt.Printf("草稿: %t\n", release.Draft)
		fmt.Printf("资源文件数量: %d\n", len(release.Assets))
		
		for j, asset := range release.Assets {
			if j >= 3 { // 每个版本只显示前3个资源文件
				break
			}
			fmt.Printf("  - %s (%d bytes, 下载 %d 次)\n", 
				asset.Name, asset.Size, asset.DownloadCount)
		}
	}
	
	// 检查更新
	fmt.Println("\n检查是否有新版本...")
	release, hasUpdate := updaterInstance.CheckForUpdates()
	
	if hasUpdate && release != nil {
		fmt.Printf("发现新版本: %s\n", release.TagName)
		fmt.Printf("发布说明: %s\n", release.Body)
	} else {
		fmt.Println("当前已是最新版本")
	}
}
